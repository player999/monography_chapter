DOT(1)                      General Commands Manual                     DOT(1)



NNAAMMEE
       dot - filter for drawing directed graphs
       neato - filter for drawing undirected graphs
       twopi - filter for radial layouts of graphs
       circo - filter for circular layout of graphs
       fdp - filter for drawing undirected graphs
       sfdp - filter for drawing large undirected graphs
       patchwork - filter for tree maps

SSYYNNOOPPSSIISS
       ddoott [_o_p_t_i_o_n_s] [files]
       nneeaattoo [_o_p_t_i_o_n_s] [files]
       ttwwooppii [_o_p_t_i_o_n_s] [files]
       cciirrccllee [_o_p_t_i_o_n_s] [files]
       ffddpp [_o_p_t_i_o_n_s] [files]
       ssffddpp [_o_p_t_i_o_n_s] [files]
       ppaattcchhwwoorrkk [_o_p_t_i_o_n_s] [files]

DDEESSCCRRIIPPTTIIOONN
       These  are a collection of programs for drawing graphs.  There is actu‐
       ally only one main program; the specific layout algorithms  implemented
       as  plugins.  Thus,  they  largely  share  all of the same command-line
       options.  _d_o_t draws directed graphs.  It works well on DAGs  and  other
       graphs that can be drawn as hierarchies.

       _n_e_a_t_o  draws  undirected graphs using ``spring'' models (see Kamada and
       Kawai, Information Processing Letters 31:1, April 1989).

       _t_w_o_p_i draws graphs using a radial layout (see G.  Wills,  Symposium  on
       Graph  Drawing  GD'97, September, 1997).  Basically, one node is chosen
       as the center and put at the origin.  The remaining nodes are placed on
       a  sequence  of  concentric  circles  centered about the origin, each a
       fixed radial distance from the previous circle.  All nodes  distance  1
       from  the  center  are placed on the first circle; all nodes distance 1
       from a node on the first circle are placed on the second circle; and so
       forth.

       _c_i_r_c_o  draws graphs using a circular layout (see Six and Tollis, GD '99
       and ALENEX '99, and Kaufmann and Wiese, GD '02.)  The  tool  identifies
       biconnected  components  and draws the nodes of the component on a cir‐
       cle. The block‐cutpoint tree is then laid out using a recursive  radial
       algorithm.  Edge  crossings within a circle are minimized by placing as
       many edges on the circle's perimeter as possible.   In  particular,  if
       the component is outerplanar, the component will have a planar layout.

       If  a  node belongs to multiple non‐trivial biconnected components, the
       layout puts the node in one of them. By default, this is the first non‐
       trivial component found in the search from the root component.

       _f_d_p  draws  undirected  graphs using a ``spring'' model. It relies on a
       force‐directed approach in the spirit of Fruchterman and Reingold  (cf.
       Software‐Practice & Experience 21(11), 1991, pp. 1129‐1164).

       _s_f_d_p  also draws undirected graphs using the ``spring'' model described
       above, but it uses a multi-scale approach to produce layouts  of  large
       graphs in a reasonably short time.

       _p_a_t_c_h_w_o_r_k draws the graph as a squarified treemap (see M. Bruls et al.,
       "Squarified treemaps", Proc. Joint Eurographics and IEEE TCVG Symp.  on
       Visualization,  2000, pp. 33-42). The clusters of the graph are used to
       specify the tree.

OOUUTTPPUUTT FFOORRMMAATTSS
       Graphviz uses an extensible plugin mechanism for its output  renderers,
       so to see what output formats your installation of dot supports you can
       use ``dot -Txxx'' (where xxx is an unlikely format) and check the warn‐
       ing  message.  Also, The plugin mechanism supports multiple implementa‐
       tions of the output formats.  To see what variants are available,  use,
       for example: ``dot -Tpng:'' and to force a particular variant, use, for
       example: ``dot -Tpng:gd''

       Traditionally, Graphviz supports the following:
       --TTppss (PostScript),
       --TTssvvgg --TTssvvggzz (Structured Vector Graphics),
       --TTffiigg (XFIG graphics),
       --TTppnngg --TTggiiff (bitmap graphics),
       --TTiimmaapp (imagemap files for httpd servers for each node or edge that has
       a non‐null "href" attribute.),
       --TTccmmaappxx (client‐side imagemap for use in html and xhtml).
       Additional  less  common  or more special‐purpose output formats can be
       found at //http://www.graphviz.org/content/output-formats.

       Alternative plugins providing support for a given output format can  be
       found from the error message resulting from appending a ':' to the for‐
       mat. e.g. --TTppnngg:: The first plugin listed is always the default.

       The --PP switch can be used to produce a graph  of  all  output  variants
       supported by plugins in the local installation of graphviz.

GGRRAAPPHH FFIILLEE LLAANNGGUUAAGGEE
       Here  is  a  synopsis  of  the  graph file language, normally using the
       extension ..ggvv, for graphs:

       [ssttrriicctt] (ggrraapphh|ddiiggrraapphh) _n_a_m_e { _s_t_a_t_e_m_e_n_t_‐_l_i_s_t }
       is the top‐level graph. If the graph is ssttrriicctt, then multiple edges are
       not  allowed  between  the  same  pairs  of nodes.  If it is a directed
       graph, indicated by ddiiggrraapphh, then the _e_d_g_e_o_p must be "->". If it is  an
       undirected ggrraapphh then the _e_d_g_e_o_p must be "--".

       Statements may be:

       _n_a_m_e==_v_a_l;;
       nnooddee [[_n_a_m_e==_v_a_l]];;
       eeddggee [[_n_a_m_e==_v_a_l]];;
       Set  default graph, node, or edge attribute _n_a_m_e to _v_a_l.  Any subgraph,
       node, or edge appearing after this inherits the new default attributes.

       nn00 [[_n_a_m_e_0_=_v_a_l_0_,_n_a_m_e_1_=_v_a_l_1_,_._._.]];;
       Creates node nn00 (if it does not already exist) and sets its  attributes
       according to the optional list.

       nn00 _e_d_g_e_o_p n1 _e_d_g_e_o_p _._._. _e_d_g_e_o_p nn [[_n_a_m_e_0_=_v_a_l_0_,_n_a_m_e_1_=_v_a_l_1_,_._._.]];;
       Creates  edges  between nodes nn00, nn11, ..., nnnn and sets their attributes
       according to the optional list.  Creates nodes as necessary.

       [ssuubbggrraapphh _n_a_m_e] {{ _s_t_a_t_e_m_e_n_t_‐_l_i_s_t }}
       Creates a subgraph.  Subgraphs may be used in place of nn00, ...,  nnnn  in
       the  above statements to create edges.  [ssuubbggrraapphh _n_a_m_e] is optional; if
       missing, the subgraph is assigned an internal name.

       Comments may be /*C‐like*/ or //C++‐like.


       Attribute names and values are ordinary (C‐style) strings.  The follow‐
       ing sections describe attributes that control graph layout.

       A   more   complete  description  of  the  language  can  be  found  at
       http://www.graphviz.org/content/dot-language.

GGRRAAPPHH,, NNOODDEE AANNDD EEDDGGEE AATTTTRRIIBBUUTTEESS
       Graphviz uses the _n_a_m_e=_v_a_l_u_e attributes, attached to graphs, subgraphs,
       nodes  and  edges, to tailor the layout and rendering. We list the more
       prominent  attributes  below.  The  complete  list  is   available   at
       http://www.graphviz.org/content/attrs.

  GGrraapphh AAttttrriibbuutteess
       ssiizzee==""_x_,_y"" specifies the maximum bounding box of drawing in inches.

       rraattiioo==_f  sets  the aspect ratio to _f which may be a floating point num‐
       ber, or one of the keywords ffiillll, ccoommpprreessss, or aauuttoo.

       llaayyoouutt==_e_n_g_i_n_e indicates the preferred layout  engine  ("dot",  "neato",
       fdp"  etc)  overriding  the default from the basename of the command or
       the -K commandline option.

       mmaarrggiinn==_f sets the page margin (included in the page size).

       nnooddeesseepp==_f sets the minimum separation between nodes.

       rraannkksseepp==_f sets the minimum separation between ranks.

       oorrddeerriinngg==oouutt constrains order of out‐edges in a subgraph  according  to
       their file sequence.

       rraannkkddiirr==LLRR||RRLL||BBTT requests a left‐to‐right, right‐to‐left, or bottom‐to‐
       top, drawing.

       rraannkk==ssaammee (or mmiinn or mmaaxx) in a subgraph constrains the rank  assignment
       of  its nodes.   If a subgraph's name has the prefix cclluusstteerr, its nodes
       are drawn in a distinct rectangle  of  the  layout.   Clusters  may  be
       nested.

       rroottaattee==9900  sets landscape mode.  (oorriieennttaattiioonn==llaanndd is backward compati‐
       ble but obsolete.)

       cceenntteerr==_n a non‐zero value centers the drawing on the page.

       ccoolloorr==_c_o_l_o_r_v_a_l_u_e sets foreground color (bbggccoolloorr for background).

       hhrreeff==_"_u_r_l_" the default url for image map files;  in  PostScript  files,
       the  base URL for all relative URLs, as recognized by Acrobat Distiller
       3.0 and up.

       UURRLL==_"_u_r_l_" ("URL" is a synonym for "href".)

       ssttyylleesshheeeett==_"_f_i_l_e_._c_s_s_" includes a reference to a stylesheet in -Tsvg and
       -Tsvgz outputs.  Ignored by other formats.

       sspplliinneess  If  set  to _t_r_u_e, edges are drawn as splines.  If set to _p_o_l_y_‐
       _l_i_n_e, edges are drawn as polylines.  If set to _o_r_t_h_o, edges  are  drawn
       as  orthogonal  polylines.   In  all  of these cases, the nodes may not
       overlap.  If sspplliinneess==_f_a_l_s_e or sspplliinneess==_l_i_n_e, edges  are  drawn  as  line
       segments.   The  default  is _t_r_u_e for dot, and _f_a_l_s_e for all other lay‐
       outs.


       ((nneeaattoo‐‐ssppeecciiffiicc aattttrriibbuutteess))
       ssttaarrtt==_v_a_l.  Requests random initial placement and seeds the random num‐
       ber  generator.   If  _v_a_l  is not an integer, the process ID or current
       time is used as the seed.

       eeppssiilloonn==_n.  Sets the cutoff for the solver.  The default is 0.1.


       ((ttwwooppii‐‐ssppeecciiffiicc aattttrriibbuutteess))
       rroooott==_c_t_r. This specifies the node to be used as the center of the  lay‐
       out.  If  not specified, _t_w_o_p_i will randomly pick one of the nodes that
       are furthest from a leaf node, where a leaf node is a node of degree 1.
       If no leaf nodes exists, an arbitrary node is picked as center.

       rraannkksseepp==_v_a_l.  Specifies  the  radial  distance  in  inches  between the
       sequence of rings. The default is 0.75.

       oovveerrllaapp==_m_o_d_e. This specifies what _t_w_o_p_i should do if any nodes overlap.
       If  mode  is  _"_f_a_l_s_e_",  the program uses Voronoi diagrams to adjust the
       nodes to eliminate overlaps. If mode is _"_s_c_a_l_e_",  the  layout  is  uni‐
       formly scaled up, preserving node sizes, until nodes no longer overlap.
       The latter technique removes overlaps  while  preserving  symmetry  and
       structure,  while  the  former  removes  overlaps  more  compactly  but
       destroys symmetries.  If mode is _"_t_r_u_e_" (the default), no repositioning
       is done.


       ((cciirrccoo‐‐ssppeecciiffiicc aattttrriibbuutteess))
       rroooott==_n_o_d_e_n_a_m_e.  Specifies  the  name  of  a  node occurring in the root
       block. If the graph is disconnected, the rroooott  node  attribute  can  be
       used to specify additional root blocks.

       mmiinnddiisstt==_v_a_l_u_e.  Sets  the  minimum separation between all nodes. If not
       specified then _c_i_r_c_o uses a default value of 1.0.


       ((ffddpp‐‐ssppeecciiffiicc aattttrriibbuutteess))
       KK==_v_a_l. Sets the default ideal node separation in the layout.

       mmaaxxiitteerr==_v_a_l. Sets the maximum number of iterations used to  layout  the
       graph.

       ssttaarrtt==_v_a_l. Adjusts the random initial placement of nodes with no speci‐
       fied position.  If _v_a_l is is an integer, it is used as the seed for the
       random  number  generator.   If _v_a_l is not an integer, a random system‐
       generated integer, such as the process ID or current time, is  used  as
       the seed.

  NNooddee AAttttrriibbuutteess
       hheeiigghhtt==_d  or  wwiiddtthh==_d  sets  minimum  height  or  width.  Adding ffiixxeedd‐‐
       ssiizzee==ttrruuee forces these to be the actual size (text labels are ignored).

       sshhaappee==rreeccoorrdd ppoollyyggoonn eeppssff _b_u_i_l_t_i_n___s_h_a_p_e
       _b_u_i_l_t_i_n___p_o_l_y_g_o_n can be ppllaaiinntteexxtt eelllliippssee oovvaall cciirrccllee eegggg  ttrriiaannggllee  bbooxx
       ddiiaammoonndd  ttrraappeezziiuumm  ppaarraalllleellooggrraamm  hhoouussee hheexxaaggoonn ooccttaaggoonn nnoottee ttaabb bbooxx33dd
       ccoommppoonneenntt, among others.  (Polygons are defined or modified by the fol‐
       lowing  node attributes: rreegguullaarr, ppeerriipphheerriieess, ssiiddeess, oorriieennttaattiioonn, ddiiss‐‐
       ttoorrttiioonn and sskkeeww.)  eeppssff uses the node's  sshhaappeeffiillee  attribute  as  the
       path  name  of an external EPSF file to be automatically loaded for the
       node shape.

       See http://www.graphviz.org/content/node-shapes for a complete descrip‐
       tion of node shapes.

       llaabbeell==_t_e_x_t  where  _t_e_x_t  may include escaped newlines \n, \l, or \r for
       center, left, and right justified lines.  The string '\N' value will be
       replaced  by  the node name.  The string '\G' value will be replaced by
       the graph name.  Record labels may contain recursive box  lists  delim‐
       ited  by { | }.  Port identifiers in labels are set off by angle brack‐
       ets < >.  In the graph file, use colon (such as, nnooddee00::ppoorrtt2288).

       Graphviz also supports special HTML-like labels for  constructing  com‐
       plex   node   content.   A   full‐description  of  these  is  given  at
       http://www.graphviz.org/content/node-shapes#html.

       ffoonnttssiizzee==_n sets the label type size to _n points.

       ffoonnttnnaammee==_n_a_m_e sets the label font family name.

       ccoolloorr==_c_o_l_o_r_v_a_l_u_e sets the outline color, and the default fill color  if
       style=filled and ffiillllccoolloorr is not specified.

       ffiillllccoolloorr==_c_o_l_o_r_v_a_l_u_e  sets  the  fill  color when style=filled.  If not
       specified, the fillcolor when style=filled defaults to be the  same  as
       the outline color.

       ffoonnttccoolloorr==_c_o_l_o_r_v_a_l_u_e sets the label text color.

       A  _c_o_l_o_r_v_a_l_u_e  may  be  "_h_,_s_,_v""  (hue, saturation, brightness) floating
       point numbers between 0 and 1, or an X11 color name such as wwhhiittee bbllaacckk
       rreedd  ggrreeeenn  bblluuee yyeellllooww mmaaggeennttaa ccyyaann or bbuurrllyywwoooodd, or a "_#_r_r_g_g_b_b_" _(_r_e_d_,
       _g_r_e_e_n_, _b_l_u_e_, _2 _h_e_x _c_h_a_r_a_c_t_e_r_s _e_a_c_h_) _v_a_l_u_e_.

       ssttyyllee==ffiilllleedd ssoolliidd ddaasshheedd ddootttteedd bboolldd iinnvviiss or any Postscript code.

       hhrreeff==_"_u_r_l_" sets the url for the node in imagemap,  PostScript  and  SVG
       files.  The substrings '\N' and '\G' are substituted in the same manner
       as for the node label attribute.  Additionally the  substring  '\L'  is
       substituted with the node label string.

       UURRLL==_"_u_r_l_" ("URL" is a synonym for "href".)

       ttaarrggeett==_"_t_a_r_g_e_t_"  is  a target string for client‐side imagemaps and SVG,
       effective when nodes have a URL.  The target string is used  to  deter‐
       mine  which  window  of the browser is used for the URL.  Setting it to
       "_graphviz" will open a new window if it doesn't already exist, or  re‐
       use it if it does.  If the target string is empty, the default, then no
       target attribute is included in the output.  The  substrings  '\N'  and
       '\G'  are  substituted  in  the  same  manner  as  for  the  node label
       attribute.  Additionally the substring '\L'  is  substituted  with  the
       node label string.

       ttoooollttiipp==_"_t_o_o_l_t_i_p_"  is  a  tooltip  string for client‐side imagemaps and
       SVG, effective when nodes have a URL.  The tooltip string  defaults  to
       be the same as the label string, but this attribute permits nodes with‐
       out labels to still have tooltips thus permitting denser  graphs.   The
       substrings  '\N' and '\G' are substituted in the same manner as for the
       node label attribute.  Additionally the substring '\L'  is  substituted
       with the node label string.

       The following attributes apply only to polygon shape nodes:

       rreegguullaarr==_n  if _n is non‐zero then the polygon is made regular, i.e. sym‐
       metric about the x and y axis,  otherwise  the  polygon  takes  on  the
       aspect ratio of the label.  _b_u_i_l_t_i_n___p_o_l_y_g_o_n_s that are not already regu‐
       lar are made regular by  this  attribute.   _b_u_i_l_t_i_n___p_o_l_y_g_o_n_s  that  are
       already  regular  are  not affected (i.e.  they cannot be made asymmet‐
       ric).

       ppeerriipphheerriieess==_n sets the number of periphery lines drawn around the poly‐
       gon.    This   value  supersedes  the  number  of  periphery  lines  of
       _b_u_i_l_t_i_n___p_o_l_y_g_o_n_s.

       ssiiddeess==_n sets the number of sides to the  polygon.  _n<3  results  in  an
       ellipse.  This attribute is ignored by _b_u_i_l_t_i_n___p_o_l_y_g_o_n_s.

       oorriieennttaattiioonn==_f  sets  the  orientation  of the first apex of the polygon
       counterclockwise from the vertical, in degrees.  _f may  be  a  floating
       point  number.   The  orientation  of  labels  is  not affected by this
       attribute.  This attribute is  added  to  the  initial  orientation  of
       _b_u_i_l_t_i_n___p_o_l_y_g_o_n_s_.

       ddiissttoorrttiioonn==_f  sets the amount of broadening of the top and narrowing of
       the bottom of the polygon  (relative  to  its  orientation).   Floating
       point  values  between  -1  and  +1  are  suggested.  This attribute is
       ignored by _b_u_i_l_t_i_n___p_o_l_y_g_o_n_s.

       sskkeeww==_f sets the amount of right‐displacement of the top  and  left‐dis‐
       placement  of  the bottom of the polygon (relative to its orientation).
       Floating point values between -1 and +1 are suggested.  This  attribute
       is ignored by _b_u_i_l_t_i_n___p_o_l_y_g_o_n_s.


       ((cciirrccoo‐‐ssppeecciiffiicc aattttrriibbuutteess))
       rroooott==_t_r_u_e_/_f_a_l_s_e.  This  specifies  that  the block containing the given
       node be treated as the root of the spanning tree in the layout.


       ((ffddpp‐‐ssppeecciiffiicc aattttrriibbuutteess))
       ppiinn==_v_a_l. If _v_a_l is "true", the node will remain at  its  initial  posi‐
       tion.


  EEddggee AAttttrriibbuutteess
       mmiinnlleenn==_n  where  _n is an integer factor that applies to the edge length
       (ranks for normal edges, or minimum node separation for flat edges).

       wweeiigghhtt==_n where _n is the integer cost of the edge.  Values greater  than
       1 tend to shorten the edge.  Weight 0 flat edges are ignored for order‐
       ing nodes.

       llaabbeell==_t_e_x_t where _t_e_x_t may include escaped newlines \n, \l,  or  \r  for
       centered,  left,  or  right  justified lines.  If the substring '\T' is
       found in a label it will be replaced by the  tail_node  name.   If  the
       substring '\H' is found in a label it will be replaced by the head_node
       name.  If the substring '\E' value is found  in  a  label  it  will  be
       replaced  by:  tail_node_name->head_node_name  If the substring '\G' is
       found in a label it will  be  replaced  by  the  graph  name.   or  by:
       tail_node_name--head_node_name for undirected graphs.

       ffoonnttssiizzee==_n sets the label type size to _n points.

       ffoonnttnnaammee==_n_a_m_e sets the label font family name.

       ffoonnttccoolloorr==_c_o_l_o_r_v_a_l_u_e sets the label text color.

       ssttyyllee==ssoolliidd ddaasshheedd ddootttteedd bboolldd iinnvviiss

       ccoolloorr==_c_o_l_o_r_v_a_l_u_e sets the line color for edges.

       ccoolloorr==_c_o_l_o_r_v_a_l_u_e_l_i_s_t  a ':' separated list of _c_o_l_o_r_v_a_l_u_e creates paral‐
       lel edges, one edge for each color.

       ddiirr==ffoorrwwaarrdd bbaacckk bbootthh nnoonnee controls arrow direction.

       ttaaiillcclliipp,,hheeaaddcclliipp==ffaallssee disables endpoint shape clipping.

       hhrreeff==_"_u_r_l_" sets the url for the node in imagemap,  PostScript  and  SVG
       files.  The substrings '\T', '\H', '\E' and '\G' are substituted in the
       same manner as for the edge label  attribute.   Additionally  the  sub‐
       string '\L' is substituted with the edge label string.

       UURRLL==_"_u_r_l_" ("URL" is a synonym for "href".)

       ttaarrggeett==_"_t_a_r_g_e_t_"  is  a target string for client‐side imagemaps and SVG,
       effective when edges have a URL.  If the target string  is  empty,  the
       default,  then no target attribute is included in the output.  The sub‐
       strings '\T', '\H', '\E' and '\G' are substituted in the same manner as
       for  the edge label attribute.  Additionally the substring '\L' is sub‐
       stituted with the edge label string.

       ttoooollttiipp==_"_t_o_o_l_t_i_p_" is a tooltip string for client‐side imagemaps  effec‐
       tive when edges have a URL.  The tooltip string defaults to be the same
       as the edge label string.  The substrings '\T', '\H', '\E' and '\G' are
       substituted  in the same manner as for the edge label attribute.  Addi‐
       tionally the substring '\L' is substituted with the edge label string.

       aarrrroowwhheeaadd,,aarrrroowwttaaiill==nnoonnee,, nnoorrmmaall,, iinnvv,, ddoott,, ooddoott,, iinnvvddoott,, iinnvvooddoott,, tteeee,,
       eemmppttyy,, iinnvveemmppttyy,, ooppeenn,, hhaallffooppeenn,, ddiiaammoonndd,, ooddiiaammoonndd,, bbooxx,, oobbooxx,, ccrrooww.

       aarrrroowwssiizzee                                 (norm_length=10,norm_width=5,
       inv_length=6,inv_width=7,dot_radius=2)

       hheeaaddllaabbeell,,ttaaiillllaabbeell==ssttrriinngg for port labels.   llaabbeellffoonnttccoolloorr,llaabbeellffoonntt‐‐
       nnaammee,llaabbeellffoonnttssiizzee  for  head  and  tail  labels.  The substrings '\T',
       '\H', '\E' and '\G' are substituted in the same manner as for the  edge
       label  attribute.   Additionally the substring '\L' is substituted with
       the edge label string.

       hheeaaddhhrreeff==_"_u_r_l_" sets the url for the head port in  imagemap,  PostScript
       and  SVG  files.   The substrings '\T', '\H', '\E' and '\G' are substi‐
       tuted in the same manner as for the edge label attribute.  Additionally
       the substring '\L' is substituted with the edge label string.

       hheeaaddUURRLL==_"_u_r_l_" ("headURL" is a synonym for "headhref".)

       hheeaaddttaarrggeett==_"_h_e_a_d_t_a_r_g_e_t_"  is  a  target string for client‐side imagemaps
       and SVG, effective when edge heads have a URL.  The  headtarget  string
       is  used  to determine which window of the browser is used for the URL.
       If the  headtarget  string  is  empty,  the  default,  then  headtarget
       defaults  to  the  same  value  as target for the edge.  The substrings
       '\T', '\H', '\E' and '\G' are substituted in the same manner as for the
       edge  label  attribute.  Additionally the substring '\L' is substituted
       with the edge label string.

       hheeaaddttoooollttiipp==_"_t_o_o_l_t_i_p_" is a tooltip  string  for  client‐side  imagemaps
       effective  when  head ports have a URL.  The tooltip string defaults to
       be the same as the headlabel string.  The substrings  '\T',  '\H',  and
       '\E'  are  substituted  in  the  same  manner  as  for  the  edge label
       attribute.  Additionally the substring '\L'  is  substituted  with  the
       edge label string.

       ttaaiillhhrreeff==_"_u_r_l_"  sets  the url for the tail port in imagemap, PostScript
       and SVG files.  The substrings '\T', '\H', '\E' and  '\G'  are  substi‐
       tuted in the same manner as for the edge label attribute.  Additionally
       the substring '\L' is substituted with the edge label string.

       ttaaiillUURRLL==_"_u_r_l_" ("tailURL" is a synonym for "tailhref".)

       ttaaiillttaarrggeett==_"_t_a_i_l_t_a_r_g_e_t_" is a target string  for  client‐side  imagemaps
       and  SVG,  effective when edge tails have a URL.  The tailtarget string
       is used to determine which window of the browser is used for  the  URL.
       If  the  tailtarget  string  is  empty,  the  default,  then tailtarget
       defaults to the same value as target  for  the  edge.   The  substrings
       '\T', '\H', '\E' and '\G' are substituted in the same manner as for the
       edge label attribute.  Additionally the substring '\L'  is  substituted
       with the edge label string.

       ttaaiillttoooollttiipp==_"_t_o_o_l_t_i_p_"  is  a  tooltip  string for client‐side imagemaps
       effective when tail ports have a URL.  The tooltip string  defaults  to
       be  the  same as the taillabel string.  The substrings '\T', '\H', '\E'
       and '\G' are substituted in the same  manner  as  for  the  edge  label
       attribute.   Additionally  the  substring  '\L' is substituted with the
       edge label string.

       llaabbeellddiissttaannccee and llaabbeellaannggllee (in degrees CCW) specify the placement  of
       head and tail labels.

       ddeeccoorraattee draws line from edge to label.

       ssaammeehheeaadd,,ssaammeettaaiill  aim  edges  having  the same value to the same port,
       using the average landing point.

       ccoonnssttrraaiinntt==ffaallssee causes an edge to be ignored for rank assignment.

       llaayyeerr==_i_d or _i_d_:_i_d or "all" sets the edge's active  layers.   The  empty
       string means no layers (invisible).


       ((nneeaattoo‐‐ssppeecciiffiicc aattttrriibbuutteess))
       ww==_f  sets the weight (spring constant) of an edge to the given floating
       point value.  The default is 1.0; greater values  make  the  edge  tend
       more toward its optimal length.

       lleenn==_f sets the optimal length of an edge.  The default is 1.0.

       ((ffddpp‐‐ssppeecciiffiicc aattttrriibbuutteess))
       wweeiigghhtt==_f  sets the weight of an edge to the given floating point value.
       The default is 1.0; greater values make the edge tend more  toward  its
       optimal length.

CCOOMMMMAANNDD‐‐LLIINNEE OOPPTTIIOONNSS
       --GG sets a default graph attribute.
       --NN sets a default node attribute.
       --EE  sets  a  default edge attribute.  Example: --GGssiizzee==""77,,88"" --NNsshhaappee==bbooxx
       --EEffoonnttssiizzee==88

       --ll_f_i_l_e loads custom PostScript library  files.   Usually  these  define
       custom  shapes  or  styles.   If  --ll  is  given by itself, the standard
       library is omitted.

       --TT_l_a_n_g sets the output language as described above.


       --nn[11|22] (no‐op) If set, neato assumes nodes  have  already  been  posi‐
       tioned  and  all  nodes  have a pos attribute giving the positions.  It
       then performs an  optional  adjustment  to  remove  node‐node  overlap,
       depending on the value of the overlap attribute, computes the edge lay‐
       outs, depending on the value of the sspplliinneess attribute,  and  emits  the
       graph  in  the  appropriate  format.  If num is supplied, the following
       actions occur:
           num = 1
       Equivalent to -n.
           num > 1
       Use node positions as specified, with no adjustment to remove node‐node
       overlaps,  and  use  any  edge  layouts  already  specified  by the pos
       attribute.  neato computes an edge layout for any edge  that  does  not
       have  a  pos attribute.  As usual, edge layout is guided by the sspplliinneess
       attribute.

       --KK_l_a_y_o_u_t override the default layout  engine  implied  by  the  command
       name.

       --OO  automatically generate output filenames based on the input filename
       and the -T format.

       --PP generate a graph of the currently available plugins.

       --vv (verbose) prints various information useful for debugging.

       --cc configure plugins.

       --mm memory test (observe no growth with top, kill when done).

       --qq_l_e_v_e_l sseett lleevveell ooff mmeessssaaggee ssuupppprreessssiioonn.. TThhee ddeeffaauulltt iiss 11..

       --ss_f_s_c_a_l_e ssccaallee iinnppuutt bbyy _f_s_c_a_l_e,, tthhee ddeeffaauulltt iiss 7722..

       --yy invert y coordinate in output.

       --VV (version) prints version information and exits.

       --?? prints the usage and exits.

       A complete description of the available  command‐line  options  can  be
       found at http://www.graphviz.org/content/command-line-invocation.

EEXXAAMMPPLLEESS
       digraph test123 {
               a -> b -> c;
               a -> {x y};
               b [shape=box];
               c [label="hello\nworld",color=blue,fontsize=24,
                    fontname="Palatino-Italic",fontcolor=red,style=filled];
               a -> z [label="hi", weight=100];
               x -> z [label="multi-line\nlabel"];
               edge [style=dashed,color=red];
               b -> x;
               {rank=same; b x}
       }

       graph test123 {
               a -- b -- c;
               a -- {x y};
               x -- c [w=10.0];
               x -- y [w=5.0,len=3];
       }

CCAAVVEEAATTSS
       Edge splines can overlap unintentionally.

       Flat  edge  labels  are  slightly broken.  Intercluster edge labels are
       totally broken.

       Because unconstrained optimization is employed, node boxes can possibly
       overlap  or  touch unrelated edges.  All existing spring embedders seem
       to have this limitation.

       Apparently reasonable attempts to pin nodes or adjust edge lengths  and
       weights can cause instability.

AAUUTTHHOORRSS
       Stephen C. North <north@research.att.com>
       Emden R. Gansner <erg@research.att.com>
       John C. Ellson <ellson@research.att.com>
       Yifan Hu <yifanhu@research.att.com>

       The   bitmap   driver   (PNG,   GIF   etc)   is   by   Thomas  Boutell,
       <http://www.boutell.com/gd>

       The Truetype font renderer is from the Freetype Project (David  Turner,
       Robert   Wilhelm,   and  Werner  Lemberg)  (who  can  be  contacted  at
       freetype-devel@lists.lrz-muenchen.de).

SSEEEE AALLSSOO
       This man page contains only a small amount of the  information  related
       to  the  Graphviz layout programs. The most complete information can be
       found at http://www.graphviz.org/Documentation.php, especially  in  the
       on‐line  reference pages. Most of these documents are also available in
       the _d_o_c and _d_o_c_/_i_n_f_o subtrees in the source and binary distributions.

       ddoottttyy(1),ttccllddoott(n),xxccoolloorrss(1),lliibbggrraapphh(3).

       E. R. Gansner, S. C. North,  K.  P.  Vo,  "DAG  ‐  A  Program  to  Draw
       Directed  Graphs",  Software ‐ Practice and Experience 17(1), 1988, pp.
       1047‐1062.
       E. R. Gansner, E. Koutsofios, S. C. North,  K. P. Vo, "A Technique  for
       Drawing  Directed  Graphs,"  IEEE Trans. on Soft. Eng. 19(3), 1993, pp.
       214‐230.
       S. North and E.  Koutsofios,  "Applications  of  graph  visualization",
       Graphics Interface 94, pp. 234‐245.
       E.R.  Gansner  and  E. Koutsofios and S. C. North, "Drawing Graphs with
       dot," Available at http://www.graphviz.org/pdf/dotguide.pdf.
       S.     C.     North,     "NEATO     User's     Manual".       Available
       http://www.graphviz.org/pdf/neatoguide.pdf.




                                 12 July 2013                           DOT(1)
